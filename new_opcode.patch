From dc7780214bfb1ca351e0622b56bcde1bcac90e6d Mon Sep 17 00:00:00 2001
From: AlexeyZ <z1195522@gmail.com>
Date: Wed, 30 Mar 2022 17:29:01 +0300
Subject: [PATCH] feat: add LOAD_OTUS opcode

---
 Include/opcode.h        |  3 +++
 Lib/opcode.py           |  3 +++
 Python/ceval.c          | 15 +++++++++++++++
 Python/opcode_targets.h |  2 +-
 Python/peephole.c       | 30 ++++++++++++++++++++++++++++++
 5 files changed, 52 insertions(+), 1 deletion(-)

diff --git a/Include/opcode.h b/Include/opcode.h
index 9ed548729e..fb4742c0a0 100644
--- a/Include/opcode.h
+++ b/Include/opcode.h
@@ -159,6 +159,9 @@ extern "C" {
 #define SET_ADD         146
 #define MAP_ADD         147
 
+/* LOAD_FAST 0 + LOAD_CONST */
+#define LOAD_OTUS       148
+
 
 enum cmp_op {PyCmp_LT=Py_LT, PyCmp_LE=Py_LE, PyCmp_EQ=Py_EQ, PyCmp_NE=Py_NE, PyCmp_GT=Py_GT, PyCmp_GE=Py_GE,
 	     PyCmp_IN, PyCmp_NOT_IN, PyCmp_IS, PyCmp_IS_NOT, PyCmp_EXC_MATCH, PyCmp_BAD};
diff --git a/Lib/opcode.py b/Lib/opcode.py
index e403365b6a..88b17759ab 100644
--- a/Lib/opcode.py
+++ b/Lib/opcode.py
@@ -189,4 +189,7 @@ EXTENDED_ARG = 145
 def_op('SET_ADD', 146)
 def_op('MAP_ADD', 147)
 
+def_op('LOAD_OTUS', 148)
+hasconst.append(148)
+
 del def_op, name_op, jrel_op, jabs_op
diff --git a/Python/ceval.c b/Python/ceval.c
index e1140a8e40..2130f7b0d8 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -1243,6 +1243,21 @@ PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
             PUSH(x);
             FAST_DISPATCH();
         }
+        TARGET(LOAD_OTUS)
+        {
+        	/* LOAD_FAST 0 */
+            x = GETLOCAL(0);
+            if (x != NULL) {
+                Py_INCREF(x);
+                PUSH(x);
+            }
+
+        	/* LOAD_CONST arg */
+            x = GETITEM(consts, oparg);
+            Py_INCREF(x);
+            PUSH(x);
+            FAST_DISPATCH();
+        }
 
         PREDICTED_WITH_ARG(STORE_FAST);
         TARGET(STORE_FAST)
diff --git a/Python/opcode_targets.h b/Python/opcode_targets.h
index 95eb127a15..8c29b98960 100644
--- a/Python/opcode_targets.h
+++ b/Python/opcode_targets.h
@@ -147,7 +147,7 @@ static void *opcode_targets[256] = {
     &&TARGET_EXTENDED_ARG,
     &&TARGET_SET_ADD,
     &&TARGET_MAP_ADD,
-    &&_unknown_opcode,
+    &&TARGET_LOAD_OTUS,
     &&_unknown_opcode,
     &&_unknown_opcode,
     &&_unknown_opcode,
diff --git a/Python/peephole.c b/Python/peephole.c
index 11f6f8861c..c916aa7ca8 100644
--- a/Python/peephole.c
+++ b/Python/peephole.c
@@ -74,6 +74,32 @@ tuple_of_constants(unsigned char *codestr, Py_ssize_t n, PyObject *consts)
     return 1;
 }
 
+/* Replace LOAD_FAST 0. LOAD_CONST c1 with LOAD_OTUS c1.
+   Called with codestr pointing to the LOAD_FAST.
+   Does nothing if LOAD_FAST argument is not 0, or if the next opcode
+   after LOAD_FAST is not LOAD_CONST.
+*/
+static int
+use_load_otus_if_possible(unsigned char *codestr)
+{
+    /* Pre-conditions */
+    assert(codestr[0] == LOAD_FAST);
+
+    /* Do nothing if the next opcode is not LOAD_CONST */
+    if (codestr[CODESIZE(LOAD_FAST)] != LOAD_CONST)
+    	return 0;
+
+    /* LOAD_FAST argument should be equal to zero */
+    if (GETARG(codestr, 0) != 0)
+    	return 0;
+
+    /* Write NOPs over old LOAD_FAST and replace LOAD_CONST with
+     * LOAD_OTUS */
+    memset(codestr, NOP, CODESIZE(LOAD_FAST));
+    codestr[3] = LOAD_OTUS;
+    return 1;
+}
+
 /* Replace LOAD_CONST c1. LOAD_CONST c2 BINOP
    with    LOAD_CONST binop(c1,c2)
    The consts table must still be in list form so that the
@@ -425,6 +451,10 @@ PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names,
                 cumlc = 0;
                 break;
 
+            case LOAD_FAST:
+            	use_load_otus_if_possible(&codestr[i]);
+				break;
+
                 /* Try to fold tuples of constants (includes a case for lists
                    which are only used for "in" and "not in" tests).
                    Skip over BUILD_SEQN 1 UNPACK_SEQN 1.
-- 
2.17.1

